apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.vanniktech.maven.publish'

kotlin {
    /*
      js {
          nodejs()
      }
  */
    jvm()

    iosArm32()
    iosArm64()
    iosX64()
    iosSimulatorArm64()
//    linuxX64()
    macosX64()
    macosArm64()
    mingwX64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()
    watchosArm32()
    watchosArm64()
    watchosX86()
    watchosSimulatorArm64()

    explicitApi()

    sourceSets {
        commonMain {
            dependencies {
                api project(":flowredux")
                api libraries.flMadStateMachine
            }
        }

        commonTest {
            dependencies {
                implementation testLibraries.kotlinTest
                implementation testLibraries.kotlinTestAnnotations
                implementation testLibraries.turbine
            }
        }

        jvmMain {
            dependencies {
                implementation libraries.kotlinStdlibJdk8
            }
        }

        jvmTest {
            dependencies {
                implementation testLibraries.kotlinTestJunit
                implementation testLibraries.coroutinesTest
            }
        }

        nativeMain {
            dependencies {
                implementation (libraries.coroutinesNativeMT) {
                    force = true
                }
            }
        }
        nativeTest {
            dependencies {
                implementation (libraries.coroutinesNativeMT) {
                    force = true
                }
            }
        }


        configure([
                targets.iosArm32,
                targets.iosArm64,
                targets.iosX64,
                targets.iosSimulatorArm64,
//                targets.linuxX64,
                targets.macosX64,
                targets.macosArm64,
                targets.mingwX64,
                targets.tvosArm64,
                targets.tvosX64,
                targets.tvosSimulatorArm64,
                targets.watchosArm32,
                targets.watchosArm64,
                targets.watchosX86,
                targets.watchosSimulatorArm64,
        ]) {
            compilations.main.source(sourceSets.nativeMain)
            compilations.test.source(sourceSets.nativeTest)
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
                freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
            }
        }
    }

    targets.jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}
