// apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jetbrains.kotlin.multiplatform'

gradle.ext.isCiServer = true // System.getenv().containsKey("CI")
logger.warn("Running on CI: ${gradle.ext.isCiServer}")

kotlin {
//    macosX64("nativeCommon")
    jvm()
//    js()
//    macosX64()
    iosArm32()
    iosArm64()
    iosX64()
    watchosArm32()
    watchosArm64()
    watchosX86()
    tvosArm64()
    tvosX64()
//    linuxX64()
//    linuxArm32Hfp()
//    linuxMips32()
//    androidNativeArm32()
//    androidNativeArm64()
//    mingwX64()

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                // api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.2"
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.4'
                api project(":flowredux")
            }
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }

        jvmTest {
            dependencies {
                implementation testLibraries.junit
                implementation testLibraries.kotlintest
                implementation testLibraries.coroutinesTest
                implementation testLibraries.flowRecorder
                implementation 'com.freeletics.flow.test:test:0.0.2-SNAPSHOT'
            }
        }
    }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
    }
}
/*
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
 */

if (gradle.ext.isCiServer) {
    apply from: "$rootDir/gradle-mvn-mpp-push.gradle"
}