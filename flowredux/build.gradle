plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.dokka)
    alias(libs.plugins.publish)
}

kotlin {
    explicitApi = 'strict'

    /*
    js {
        nodejs()
    }
*/
    jvm()

    iosArm32()
    iosArm64()
    iosX64()
    iosSimulatorArm64()
    linuxX64()
    macosX64()
    macosArm64()
    mingwX64()
    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()
    watchosArm32()
    watchosArm64()
    watchosX86()
    watchosSimulatorArm64()

    sourceSets {
        commonMain {
            dependencies {
                api libs.coroutines.core
                api libs.mad.statemachine
            }
        }

        commonTest {
            dependencies {
                implementation libs.kotlin.test
                implementation libs.kotlin.test.annotations
                implementation libs.turbine
                implementation libs.coroutines.test
            }
        }

        nativeMain {
            dependsOn commonMain
        }
        nativeTest {
            dependsOn commonTest
        }

        configure([
            targets.iosArm32,
            targets.iosArm64,
            targets.iosX64,
            targets.iosSimulatorArm64,
            targets.linuxX64,
            targets.macosX64,
            targets.macosArm64,
            targets.mingwX64,
            targets.tvosArm64,
            targets.tvosX64,
            targets.tvosSimulatorArm64,
            targets.watchosArm32,
            targets.watchosArm64,
            targets.watchosX86,
            targets.watchosSimulatorArm64,
        ]) {
            compilations.main.source(sourceSets.nativeMain)
            compilations.test.source(sourceSets.nativeTest)
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
    }

    targets.jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = JavaVersion.toVersion(libs.versions.java.get())
            }
        }
    }
}
