// apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jetbrains.kotlin.multiplatform'

gradle.ext.isCiServer = System.getenv().containsKey("CI")
logger.warn("Running on CI: ${gradle.ext.isCiServer}")

if (gradle.ext.isCiServer) {
    apply plugin: "com.vanniktech.maven.publish"
    mavenPublish {
        targets {
            uploadArchives {
                releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
}

kotlin {
//    macosX64("nativeCommon")
    jvm()
    js()
//    macosX64()
    iosArm32()
    iosArm64()
    iosX64()
//    linuxX64()
//    linuxArm32Hfp()
//    linuxMips32()
//    androidNativeArm32()
//    androidNativeArm64()
//    mingwX64()

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                // api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.2"
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.2-native-mt-1'
            }
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        /*
        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
         */
    }
}


gradle.ext.isCiServer = System.getenv().containsKey("CI")
logger.warn("Running on CI: ${gradle.ext.isCiServer}")

if (gradle.ext.isCiServer) {
    apply plugin: "com.vanniktech.maven.publish"
    mavenPublish {
        targets {
            uploadArchives {
                releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
}

/*
dependencies {
    api libraries.kotlinStdlib
    api libraries.coroutines

    testImplementation testLibraries.junit
    testImplementation testLibraries.kotlintest
    testImplementation testLibraries.coroutinesTest
    testImplementation testLibraries.flowRecorder
    testImplementation 'com.freeletics.flow.test:test:0.0.2-SNAPSHOT'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"


*/

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
    }
}
/*
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
 */
